# estimation function. Using most basis shortcut, adding deviance to SSB
ssbdevs <-rlnorm(nits, ssb(OM)[[1]] %=% 0, 0.2)
est <- mseCtrl(method=shortcut.sa.ssbdev, args=list(SSBdevs=ssbdevs))
# if one wants to use the assessment as estimator
#est <- mseCtrl(method=est.FLSAM, args=list(sam.ctrl=NSH.ctrl,saveFit=F))
# HCR function. The quantity initac is the 2024 catch advice
hcr <- mseCtrl(method=hockeystick.hcr.NSAS,#.imy
args=list(trigger=controlPoints$Btrigger,
target=controlPoints$Ftarget,
lim=0, min=0,
BB=NA,
metric="ssb", output="catch",
minfbar = 2,maxfbar = 6,
initac=532166))
mpctrl <- mpCtrl(list(est = est,
hcr = hcr,
isys=isys))
run.mp <- mp(OM,
oem=OEM,
iem=NULL,
ctrl=mpctrl,
args=mseargs,
scenario=mp)
plot(window(OM,start=2010), run.mp)
plot(window(OM,start=2010),
list(BH=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 1))),
segReg=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 3)))
which(c(params(OM@biols$NSAS@rec)$m)
which(c(params(OM@biols$NSAS@rec)$m) == 1)
iter(run.mp,3)
iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 1)))
plot(window(OM,start=2010),
list(BH=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 1)),
segReg=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 3))))
windows()
plot(window(OM,start=2010),
list(BH=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 1)),
segReg=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 3))))
plot(window(OM,start=2010),
list(BH=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 1)),
segReg=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 3))))
run.mp@tracking
run.mp
harvest(run.mp)
harvest(run.mp@om)
df.plot <- harvest(run.mp@om)
df.plot
df.plot <- as.data.frame(harvest(run.mp@om))
df.plot
unique(df.plot$area)
F01.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(0:1),ac(1998:2023)]))
F01.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(0:1)]))
F01.all <- rbind(F01.ref,F01.proj)
F01.all$ageRange <- '0:1'
F26.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(2:6),ac(1998:2023)]))
F26.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(2:6),]))
F26.all <- rbind(F26.ref,F26.proj)
F26.all$ageRange <- '2:6'
F01.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(0:1),ac(1998:2023)]))
F01.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(0:1)]))
F01.all <- rbind(F01.ref,F01.proj)
F01.all$ageRange <- '0:1'
F26.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(2:6),ac(1998:2023)]))
F26.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(2:6),]))
F26.all <- rbind(F26.ref,F26.proj)
F26.all$ageRange <- '2:6'
F.all <- rbind(F01.all,F26.all)
ggplot(F.all,aes(x=year,y=data))+
theme_bw()+
ylab('Fbar over specific age range')+
geom_vline(xintercept = 2023,col='red')+
stat_summary(geom = "line", fun = mean, linetype = "solid") +
stat_summary(geom = "ribbon", fun.min = function(z) { quantile(z,0.05) },
fun.max = function(z) { quantile(z,0.95) }, alpha=.5,colour = NA)+
facet_wrap(~ageRange,scales = 'free',nrow = 2)
F01.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(0:1),ac(1998:2023)]))
F01.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(0:1)]))
F01.all <- rbind(F01.ref,F01.proj)
F01.all$ageRange <- '0:1'
F26.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(2:6),ac(1998:2023)]))
F26.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(2:6),]))
F26.all <- rbind(F26.ref,F26.proj)
F26.all$ageRange <- '2:6'
F.all <- rbind(F01.all,F26.all)
ggplot(F.all,aes(x=year,y=data))+
theme_bw()+
ylab('Fbar over specific age range')+
geom_vline(xintercept = 2023,col='red')+
stat_summary(geom = "line", fun = mean, linetype = "solid") +
stat_summary(geom = "ribbon", fun.min = function(z) { quantile(z,0.05) },
fun.max = function(z) { quantile(z,0.95) }, alpha=.5,colour = NA)+
facet_wrap(~ageRange,scales = 'free',nrow = 2)
F01.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(0:1),ac(1998:2023)]))
F01.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(0:1)]))
F01.all <- rbind(F01.ref,F01.proj)
F01.all$ageRange <- '0:1'
F26.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(2:6),ac(1998:2023)]))
F26.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(2:6),]))
F26.all <- rbind(F26.ref,F26.proj)
F26.all$ageRange <- '2:6'
F.all <- rbind(F01.all,F26.all)
ggplot(F.all,aes(x=year,y=data))+
theme_bw()+
ylab('Fbar over specific age range')+
geom_vline(xintercept = 2023,col='red')+
stat_summary(geom = "line", fun = mean, linetype = "solid") +
stat_summary(geom = "ribbon", fun.min = function(z) { quantile(z,0.05) },
fun.max = function(z) { quantile(z,0.95) }, alpha=.5,colour = NA)+
facet_wrap(~ageRange,scales = 'free',nrow = 2)
run.mp@tracking
run.mp@tracking$NSAS['TAC']
catch(run.mp)
df.catch
df.TAC    <- as.data.frame(run.mp@tracking$NSAS['TAC'])
df.catch  <- as.data.frame(catch(run.mp))
df.TAC
df.TAC
df.catch
rbind(df.catch,df.catch)
t <- rbind(df.catch,df.catch)
View(t)
rbind(df.TAC,df.catch)
colnames(df.TAC)
colnames(df.catch)
df.TAC    <- as.data.frame(run.mp@tracking$NSAS['TAC'])
df.catch  <- as.data.frame(catch(run.mp))
df.catch <- df.catch %>% select(-c('age','qname'))
df.catch$metric <- 'catch'
df.plot <- rbind(df.TAC,df.catch)
ggplot(df.plot,aes(x=year,y=data,fill=metric))+
theme_bw()+
geom_boxplot()
ggplot(df.plot,aes(x=as.factor(year),y=data,fill=metric))+
theme_bw()+
geom_boxplot()
df.TAC    <- as.data.frame(run.mp@tracking$NSAS['TAC'])
df.catch  <- as.data.frame(catch(run.mp))
df.catch <- df.catch %>% select(-c('age','qname'))
df.catch$metric <- 'catch'
df.plot <- rbind(df.TAC,df.catch)
ggplot(df.plot,aes(x=as.factor(year),y=data,fill=metric))+
theme_bw()+
geom_boxplot()
df.TAC    <- as.data.frame(run.mp@tracking$NSAS['TAC'])
df.catch  <- as.data.frame(catch(run.mp))
df.catch <- df.catch %>% select(-c('age','qname'))
df.catch$metric <- 'catch'
df.plot <- rbind(df.TAC,df.catch)
ggplot(df.plot,aes(x=as.factor(year),y=data,fill=metric))+
theme_bw()+
geom_boxplot()
perf <- performance(run.sam,
statistics=fullstats,
metrics=metrics,
years=list(short=2024:2028,
medium=2029:2038,
long=2039:2048,
all=2024:2048))
perf <- performance(run.mo,
statistics=fullstats,
metrics=metrics,
years=list(short=2024:2028,
medium=2029:2038,
long=2039:2048,
all=2024:2048))
perf <- performance(run.mp,
statistics=fullstats,
metrics=metrics,
years=list(short=2024:2028,
medium=2029:2038,
long=2039:2048,
all=2024:2048))
perf
perf
fullstats
sourceDir('MSE/utilities')
sourceDir('MSE/utilities')
getwd()
setwd('G:/git/wk_WKMSEHerring')
sourceDir('MSE/utilities')
library(mseviz)
library(minpack.lm)
mkdir(file.path("./MSE","data",runName))
cp(from = file.path('./OM/model/',paste0(assessmentName,'_',nits,'_OM.',runName,'.RData')),
to = file.path('./MSE','data',runName))
dir.create(file.path("./MSE","model/",runName))
dataPath      <- file.path("./MSE","data",runName)
modelPath     <- file.path("./MSE","model",runName)
sourceDir('MSE/utilities')
# computing performance metrics over selected periods
perf <- performance(run.mp,
statistics=fullstats,
metrics=metrics,
years=list(short=2024:2028,
medium=2029:2038,
long=2039:2048,
all=2024:2048))
# computing annual performance metrics
perf
perf_year <- performance(run.mp,
statistics=annualstats,
metrics=metrics,
years=2024:2048)
perf
unique(perf$name)
subset(perf,name == "max(P(SB>B[limit]))")
ggplot(subset(perf,name == "max(P(SB>B[limit]))"),aes(x=year,y=data))+
theme_bw()+
geom_point()
ggplot(subset(perf,name == "max(P(SB>B[limit]))"),aes(x=year,y=data))+
theme_bw()+
geom_point()+
ylim(0,0.05)
ggplot(subset(perf,name == "max(P(SB>B[limit]))"),aes(x=year,y=data))+
theme_bw()+
geom_point()+
ylim(0,0.05)
perf_year
perf_year$name
unique(perf_year$name)
ggplot(subset(perf_year,name == "P(SB<SB[lim])"),aes(x=year,y=data))+
theme_bw()+
geom_point()+
ylim(0,0.05)
ggplot(subset(perf_year,name == "P(SB<SB[lim])"),aes(x=an(year),y=data))+
theme_bw()+
geom_point()+
ylim(0,0.05)
controlPoints <- list(Btrigger=c(1000000),
Ftarget=c(0.3))
# background arguments
mseargs <- list(iy=2023, fy=2048, frq=1, management_lag=1, data_lag=1)
# implementation system function. Splitting fleet B-D in effort relative to fleet A
isys <- mseCtrl(method=splitE.is, args=list(split=eRelProp))
# estimation function. Using most basis shortcut, adding deviance to SSB
ssbdevs <-rlnorm(nits, ssb(OM)[[1]] %=% 0, 0.2)
est <- mseCtrl(method=shortcut.sa.ssbdev, args=list(SSBdevs=ssbdevs))
# if one wants to use the assessment as estimator
#est <- mseCtrl(method=est.FLSAM, args=list(sam.ctrl=NSH.ctrl,saveFit=F))
# HCR function. The quantity initac is the 2024 catch advice
hcr <- mseCtrl(method=hockeystick.hcr.NSAS,#.imy
args=list(trigger=controlPoints$Btrigger,
target=controlPoints$Ftarget,
lim=0, min=0,
BB=NA,
metric="ssb", output="catch",
minfbar = 2,maxfbar = 6,
initac=532166))
mpctrl <- mpCtrl(list(est = est,
hcr = hcr,
isys=isys))
run.mp <- mp(OM,
oem=OEM,
iem=NULL,
ctrl=mpctrl,
args=mseargs,
scenario=mp)
plot(window(OM,start=2010), run.mp)
plot(window(OM,start=2010),
list(BH=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 1)),
segReg=iter(run.mp,which(c(params(OM@biols$NSAS@rec)$m) == 3))))
F01.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(0:1),ac(1998:2023)]))
F01.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(0:1)]))
F01.all <- rbind(F01.ref,F01.proj)
F01.all$ageRange <- '0:1'
F26.ref <- as.data.frame(quantMeans(harvest(OM)$NSAS[ac(2:6),ac(1998:2023)]))
F26.proj <- as.data.frame(quantMeans(harvest(run.mp@om)$NSAS[ac(2:6),]))
F26.all <- rbind(F26.ref,F26.proj)
F26.all$ageRange <- '2:6'
F.all <- rbind(F01.all,F26.all)
ggplot(F.all,aes(x=year,y=data))+
theme_bw()+
ylab('Fbar over specific age range')+
geom_vline(xintercept = 2023,col='red')+
stat_summary(geom = "line", fun = mean, linetype = "solid") +
stat_summary(geom = "ribbon", fun.min = function(z) { quantile(z,0.05) },
fun.max = function(z) { quantile(z,0.95) }, alpha=.5,colour = NA)+
facet_wrap(~ageRange,scales = 'free',nrow = 2)
df.TAC    <- as.data.frame(run.mp@tracking$NSAS['TAC'])
df.catch  <- as.data.frame(catch(run.mp))
df.catch <- df.catch %>% select(-c('age','qname'))
df.catch$metric <- 'catch'
df.plot <- rbind(df.TAC,df.catch)
ggplot(df.plot,aes(x=as.factor(year),y=data,fill=metric))+
theme_bw()+
geom_boxplot()
sample.int(nits, 4)
plot(window(OM,start=2010), iter(run.mp,sample.int(nits, 4)))
iter(run.mp,sample.int(nits, 4))
iter(run.mp,sample.int(nits, 1))
iter.draw <- sample.int(nits, 4)
iter.draw
iter.draw <- sample.int(nits, 4)
plot(window(OM,start=2010), list(iter1=iter(run.mp,iter.draw[1]),
iter2=iter(run.mp,iter.draw[2]),
iter3=iter(run.mp,iter.draw[3]),
iter4=iter(run.mp,iter.draw[4])))
iter.draw <- sample.int(nits, 4)
plot(window(OM,start=2010), list(iter1=iter(run.mp,iter.draw[1]),
iter2=iter(run.mp,iter.draw[2]),
iter3=iter(run.mp,iter.draw[3]),
iter4=iter(run.mp,iter.draw[4])))
iter.draw <- sample.int(nits, 4)
plot(window(OM,start=2010), list(iter1=iter(run.mp,iter.draw[1]),
iter2=iter(run.mp,iter.draw[2]),
iter3=iter(run.mp,iter.draw[3]),
iter4=iter(run.mp,iter.draw[4])))
# computing performance metrics over selected periods
perf <- performance(run.mp,
statistics=fullstats,
metrics=metrics,
years=list(short=2024:2028,
medium=2029:2038,
long=2039:2048,
all=2024:2048))
# computing annual performance metrics
perf_year <- performance(run.mp,
statistics=annualstats,
metrics=metrics,
years=2024:2048)
ggplot(subset(perf_year,name == "P(SB<SB[lim])"),aes(x=an(year),y=data))+
theme_bw()+
geom_point()+
ylim(0,0.05)
ggplot(subset(perf_year,name == "P(SB<SB[lim])"),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
subset(perf_year,name == "P(SB<SB[lim])")
ggplot(subset(perf_year,name == "P(SB<SB[lim])"),aes(x=an(year),y=data))+
theme_bw()+
geom_boxplot()
ggplot(subset(perf_year,name == "P(SB<SB[lim])"),aes(x=as.factor(year),y=data))+
theme_bw()+
geom_boxplot()
ggplot(subset(perf_year,name == "P(SB<SB[lim])"),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
unique(perf_year$name)
ggplot(subset(perf_year,name == "mean(Cy)"),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
ggplot(subset(perf_year,name == "mean(Cy)" & year > 2023),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
ggplot(subset(perf_year,name == "mean(Cy)" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
ggplot(subset(perf_year,name == "P(SB<SB[lim])" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
ggplot(subset(perf_year,name == "mean(Cy)" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
ggplot(subset(perf_year,name == "mean(Cy)" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
subset(perf_year,name == "mean(Cy)" & year > 2024)
ggplot(subset(perf_year,name == "P(SB<SB[lim])" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_line()
ggplot(subset(perf_year,name == "mean(Cy)" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
ggplot(subset(perf_year,name == "P(SB<SB[lim])" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_line()
ggplot(subset(perf_year,name == "mean(Cy)" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
perf_year
unique(perf_year$name)
ggplot(subset(perf_year,name == "cv(C)" & year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_point()
perf
unique(perf$name)
unique(perf_year$name)
library(mseviz)
library(minpack.lm)
mkdir(file.path("./MSE","data",runName))
cp(from = file.path('./OM/model/',paste0(assessmentName,'_',nits,'_OM.',runName,'.RData')),
to = file.path('./MSE','data',runName))
dir.create(file.path("./MSE","model/",runName))
dataPath      <- file.path("./MSE","data",runName)
modelPath     <- file.path("./MSE","model",runName)
sourceDir('MSE/utilities')
# computing performance metrics over selected periods
perf <- performance(run.mp,
statistics=fullstats,
metrics=metrics,
years=list(short=2024:2028,
medium=2029:2038,
long=2039:2048,
all=2024:2048))
# computing annual performance metrics
perf_year <- performance(run.mp,
statistics=annualstats,
metrics=metrics,
years=2024:2048)
perf_year
unique(perf_year$name)
ggplot(subset(perf_year,year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_line()+
facet_wrap(~name,scales = 'free')
ggplot(subset(perf_year,year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_line()+
facet_wrap(~name,scales = 'free',ncol = 1)
unique(perf$name)
ggplot(subset(perf))+
theme_bw()+
geom_boxplot()+
facet_wrap(~name,scales = 'free',ncol = 1)
ggplot(perf,aes(x=an(year),y=data))+
theme_bw()+
geom_boxplot()+
facet_wrap(~name,scales = 'free',ncol = 1)+
ggtitle('Full stats')
ggplot(perf,aes(x=an(year),y=data))+
theme_bw()+
geom_boxplot()+
facet_wrap(~name,scales = 'free',ncol = 1)
perf
ggplot(perf,aes(x=as.factor(year),y=data))+
theme_bw()+
geom_boxplot()+
facet_wrap(~name,scales = 'free',ncol = 1)+
ggtitle('Full stats')
ggplot(subset(perf_year,year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_line()+
facet_wrap(~name,scales = 'free',ncol = 1)+
ggtitle('Annual stats')
ggplot(perf,aes(x=as.factor(year),y=data,col=name))+
theme_bw()+
geom_boxplot()+
facet_wrap(~name,scales = 'free',ncol = 1)+
ggtitle('Full stats')
ggplot(subset(perf_year,year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_line()+
facet_wrap(~name,scales = 'free',ncol = 1)+
ggtitle('Annual stats')
ggplot(perf,aes(x=as.factor(year),y=data,col=name))+
theme_bw()+
geom_boxplot()+
facet_wrap(~name,scales = 'free',ncol = 1)+
ggtitle('Full stats')
ggplot(subset(perf_year,year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_line()+
facet_wrap(~name,scales = 'free',ncol = 1)+
ggtitle('Annual stats')
ggplot(perf,aes(x=as.factor(year),y=data,col=name))+
theme_bw()+
geom_boxplot()+
facet_wrap(~name,scales = 'free',ncol = 2)+
ggtitle('Full stats')
ggplot(subset(perf_year,year > 2024),aes(x=an(year),y=data))+
theme_bw()+
geom_line()+
facet_wrap(~name,scales = 'free',ncol = 1)+
ggtitle('Annual stats')
ggplot(perf,aes(x=as.factor(year),y=data,col=name))+
theme_bw()+
geom_boxplot()+
facet_wrap(~name,scales = 'free',ncol = 2)+
ggtitle('Full stats')+
theme(legend.position = "none")
4e06
ggplot()+
theme_bw()+
geom_point(data=df.ssb,aes(x=ssb,y=rec,col=as.factor(iter)))+
geom_line(data=df.pred,aes(x=rangessb,y=predrec,col=as.factor(iter)),linewidth=1)+
xlim(0,4e06)
ggplot(df.plot,aes(x=params,y=data))+
theme_bw()+
geom_boxplot()+
geom_jitter()+
geom_hline(yintercept = 828874,col='red')+
ylim(7e5,9e5)
7e5
9e5
df.plot <- as.data.frame(NSAS.rp$NSAS['Blim'])
ggplot(df.plot,aes(x=params,y=data))+
theme_bw()+
geom_boxplot()+
geom_jitter()+
geom_hline(yintercept = 828874,col='red')+
ylim(7e5,9e5)
df.plot <- as.data.frame(NSAS.rp$NSAS['Blim'])
ggplot(df.plot,aes(x=params,y=data))+
theme_bw()+
geom_boxplot()+
geom_jitter()+
geom_hline(yintercept = 828874,col='red')+
ylim(7.5e5,9e5)
library(icesTAF)
library(FLCore)
library(FLSAM)#; load_all("C:/Repositories/FLSAMcur")
library(FLFishery)
library(FLBRP)
library(FLSRTMB)
library(msy)
library(mse)
library(tidyverse)
resSAM <- new("FLSAM")
setwd('G:/git/SAM_anunna')
source('renv/activate.R')
renv::restore()
renv::init()
